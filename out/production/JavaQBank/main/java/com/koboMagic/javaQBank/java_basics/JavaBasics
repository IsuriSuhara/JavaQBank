'this' reference is not available within a static method.
A class may contain both static and non-static variables and both static and non-static methods.
Each object of a class has its own copy of each non-static member variable.
local variables can only be accessed in the method they are defined. So you cannot access them anywhere outside that method.
All non-static/instance methods in a class are implicitly passed a 'this' parameter when called.

'this' is assigned a reference to the current object automatically by the JVM. Thus, within an instance method foo,
calling this.foo(); is same as calling foo();

Since there is no current object available for a static method, 'this' reference is not available in static methods and
therefore it can only be used within instance methods. For the same reason, static methods cannot access non static
fields or methods of that class directly i.e. without a reference to an instance of that class.

Note : you can't reassign 'this' like this: this = new Object();


Every class belongs to a package.
This is true because as per Section 7.4.2 of JLS, "A compilation unit that has no package declaration is part of an
unnamed package." Thus, if you omit the package statement, the class will belong to the unnamed package.  Remember that
classes in the unnamed package are accessible only to other classes in the unnamed package. It is not possible to import
this unnamed package in classes that belong to a named package.
A package may have just one class as well.
It is not required for a class to have a main method. The main method is required only if you want to execute that class
directly from a command line. Further, running from command line is not the only way to test a class.

There can be only 1 "public" class within package scope in a file. You can have additional inner classes that are public
though.
To make a class abstract, you only need to mark it abstract as like this
abstract class MyClass{ }
You don't necessarily need to put an abstract method in a class.